import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import CommandStart
from db import ensure_user

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://example.com")  # –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ Vercel

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in environment (GitHub/Railway secrets)")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

def kb_main():
    kb = [
        [InlineKeyboardButton(text="üöÄ –ö –∏–≥—Ä–µ", callback_data="start")],
        [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app=WebAppInfo(url=WEBAPP_URL))]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


@dp.message(CommandStart())
async def on_start(m: Message):
    uid = await ensure_user(m.from_user.id)
    await m.answer(
        "üëî Trust or Bust ‚Äî English Game\n"
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω (id={uid}).",
        reply_markup=kb_main()
    )


@dp.callback_query(F.data == "start")
async def on_start_day(cb: CallbackQuery):
    await cb.message.answer("üìò –≠—Ç–∞–ø 1 (–∑–∞–≥–ª—É—à–∫–∞): –∑–¥–µ—Å—å –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 5 —Å–ª–æ–≤.")
    await cb.answer()

async def main():
    print("Bot is running‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
