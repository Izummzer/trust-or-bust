# Trust or Bust ‚Äî English Game (app.py)
# aiogram v3, —É—Ç—Ä–æ/–≤–µ—á–µ—Ä, –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è, ¬´–∑–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞¬ª,
# —ç–∫—Å–ø–æ—Ä—Ç CSV. DB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è ensure_user.

import os, csv, random, re
from io import StringIO
from dataclasses import dataclass, field
from typing import List, Dict, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

try:
    from db import (
        ensure_user,
        start_session,
        finish_session,
        append_result,
        get_pool,
    )
except Exception:
    # fallback –Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ë–î
    async def ensure_user(tg_id: int) -> int: return 0
    async def start_session(user_id: int, level: str) -> int: return 0
    async def finish_session(session_id: int, final_balance: int): pass
    async def append_result(*args, **kwargs): pass
    async def get_pool():  # —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑–æ–≤–µ—Ç—Å—è
        raise RuntimeError("DB pool is unavailable in fallback mode")


# ---------- CONFIG ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing")

# ---------- ICONS ----------
CHECK = "‚úÖ"
CROSS = "‚ùå"
EMP   = "üßë‚Äçüíº"
NOTE  = "üìù"
START_EMOJI  = "üöÄ"
EXPORT_EMOJI = "üì§"
MAG   = "üîé"
GREEN = "üü¢"
ARROW = "‚û°Ô∏è"
DOC   = "üìÑ"
FLAG  = "üèÅ"

# ---------- DATA ----------
@dataclass
class Example:
    text: str
    text_ru: str
    uses: List[str]
    is_correct: bool
    employee_proposal: Optional[str] = None
    employee_proposal_ru: Optional[str] = None
    error_type: Optional[str] = None
    error_highlight: List[str] = field(default_factory=list)
    explanation: Optional[str] = None
    correct_note: Optional[str] = None

@dataclass
class WordCard:
    word: str
    translation: str

@dataclass
class EveningItem:
    example: Example
    employee_card: bool  # True=—Å—á–∏—Ç–∞–µ—Ç –≤–µ—Ä–Ω—ã–º, False=—Å—á–∏—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–º

@dataclass
class UserState:
    stage: str = "idle"
    level: str = "A2"
    pos: str = "adjectives"
    balance: int = 0
    session_id: int = 0
    deck: List[WordCard] = field(default_factory=list)
    word2id: Dict[str, int] = field(default_factory=dict)
    morning_idx: int = 0
    evening_idx: int = 0
    evening_queue: List[EveningItem] = field(default_factory=list)
    results: List[Dict] = field(default_factory=list)
    study_bank: Dict[str, List[tuple]] = field(default_factory=dict)


USERS: Dict[int, UserState] = {}

# ---------- BANKS ----------
A2_ADJ = [WordCard("big","–±–æ–ª—å—à–æ–π"), WordCard("small","–º–∞–ª–µ–Ω—å–∫–∏–π"),
          WordCard("easy","–ª—ë–≥–∫–∏–π"), WordCard("hard","—Ç—Ä—É–¥–Ω—ã–π"),
          WordCard("busy","–∑–∞–Ω—è—Ç–æ–π")]

B1_ADJ = [
    WordCard("reliable","–Ω–∞–¥—ë–∂–Ω—ã–π"),
    WordCard("efficient","—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π"),
    WordCard("flexible","–≥–∏–±–∫–∏–π"),
    WordCard("confident","—É–≤–µ—Ä–µ–Ω–Ω—ã–π"),
    WordCard("accurate","—Ç–æ—á–Ω—ã–π"),
    WordCard("productive","–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π"),
    WordCard("creative","–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"),
]

B2_ADJ = [
    WordCard("meticulous","–¥–æ—Ç–æ—à–Ω—ã–π"),
    WordCard("versatile","—Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π"),
    WordCard("robust","–Ω–∞–¥—ë–∂–Ω—ã–π/—É—Å—Ç–æ–π—á–∏–≤—ã–π"),
    WordCard("scalable","–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π"),
    WordCard("redundant","–∏–∑–±—ã—Ç–æ—á–Ω—ã–π"),
]

WORD_BANK: Dict[str, List[WordCard]] = {
    "A1": A2_ADJ,   # —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    "A2": B1_ADJ,
    "B1": B2_ADJ,
    "B2": B2_ADJ,
}

# –£—Ç—Ä–µ–Ω–Ω–∏–µ (–æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∞ —Å–ª–æ–≤–æ)
STAGE1_EXAMPLES: Dict[str, Example] = {
    "reliable":  Example("Our team is reliable and finishes tasks on time.",
                         "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—ë–∂–Ω–∞—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤–æ–≤—Ä–µ–º—è.", ["reliable"], True),
    "efficient": Example("This tool is efficient for our project.",
                         "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.", ["efficient"], True),
    "flexible":  Example("We need a flexible plan for the week.",
                         "–ù–∞–º –Ω—É–∂–µ–Ω –≥–∏–±–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é.", ["flexible"], True),
    "confident": Example("She is confident about the interview.",
                         "–û–Ω–∞ —É–≤–µ—Ä–µ–Ω–∞ –Ω–∞—Å—á—ë—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.", ["confident"], True),
    "accurate":  Example("We need accurate data for the report.",
                         "–ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞.", ["accurate"], True),
    "productive":Example("A short break can make you more productive.",
                         "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—Å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.", ["productive"], True),
    "creative":  Example("We need a creative idea for this ad.",
                         "–ù–∞–º –Ω—É–∂–Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏–¥–µ—è –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º—ã.", ["creative"], True),

    "meticulous": Example("She is meticulous and checks every detail.",
                          "–û–Ω–∞ –¥–æ—Ç–æ—à–Ω–∞—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å.", ["meticulous"], True),
    "versatile":  Example("A versatile employee can do many different tasks.",
                          "–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á.", ["versatile"], True),
    "robust":     Example("The system is robust and works under heavy load.",
                          "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–¥—ë–∂–Ω–∞—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.", ["robust"], True),
    "scalable":   Example("Our product is scalable and can handle more users.",
                          "–ù–∞—à –ø—Ä–æ–¥—É–∫—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –∏ –º–æ–∂–µ—Ç –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", ["scalable"], True),
    "redundant":  Example("This step is redundant in our process.",
                          "–≠—Ç–æ—Ç —à–∞–≥ –∏–∑–±—ã—Ç–æ—á–µ–Ω –≤ –Ω–∞—à–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.", ["redundant"], True),
}

# –í–µ—á–µ—Ä–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (—á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–∏–º–µ—Ä)
ALT_OK: Dict[str, List[Example]] = {
    "reliable":  [Example("A reliable colleague keeps promises.", "–ù–∞–¥—ë–∂–Ω—ã–π –∫–æ–ª–ª–µ–≥–∞ –¥–µ—Ä–∂–∏—Ç –æ–±–µ—â–∞–Ω–∏—è.", ["reliable"], True)],
    "efficient": [Example("An efficient team saves time and budget.", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —ç–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –∏ –±—é–¥–∂–µ—Ç.", ["efficient"], True)],
    "flexible":  [Example("Flexible policies help employees.", "–ì–∏–±–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.", ["flexible"], True)],
    "confident": [Example("I feel confident after preparation.", "–Ø —á—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.", ["confident"], True)],
    "accurate":  [Example("Accurate numbers are important for decisions.", "–¢–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.", ["accurate"], True)],
    "productive":[Example("I had a productive day at work.", "–£ –º–µ–Ω—è –±—ã–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–∞ —Ä–∞–±–æ—Ç–µ.", ["productive"], True)],
    "creative":  [Example("She came up with a creative solution.", "–û–Ω–∞ –ø—Ä–∏–¥—É–º–∞–ª–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.", ["creative"], True)],
    "meticulous":[Example("He is meticulous and checks every line.", "–û–Ω –¥–æ—Ç–æ—à–Ω—ã–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É.", ["meticulous"], True)],
    "versatile": [Example("A versatile tool is useful in many situations.", "–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª–µ–∑–µ–Ω –≤–æ –º–Ω–æ–≥–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.", ["versatile"], True)],
    "robust":    [Example("This app is robust and rarely crashes.", "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–¥—ë–∂–Ω–æ –∏ —Ä–µ–¥–∫–æ –ø–∞–¥–∞–µ—Ç.", ["robust"], True)],
    "scalable":  [Example("The platform is scalable for future growth.", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–æ—Å—Ç–∞.", ["scalable"], True)],
    "redundant": [Example("We removed redundant details from the report.", "–ú—ã —É–±—Ä–∞–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç—á—ë—Ç–∞.", ["redundant"], True)],
}

def kb_intro():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å?", callback_data="show_process")
    kb.adjust(1)
    return kb.as_markup()

def kb_process_only_choose_level():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{MAG} –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="choose_level")
    kb.adjust(1)
    return kb.as_markup()

def kb_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{START_EMOJI} –ö –∏–≥—Ä–µ", callback_data="start_day")
    kb.button(text=f"{MAG} –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="choose_level")
    kb.button(text=f"{EXPORT_EMOJI} –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")
    kb.adjust(1)
    return kb.as_markup()

def kb_levels():
    kb = InlineKeyboardBuilder()
    for lvl in ["A1","A2","B1","B2"]:
        kb.button(text=lvl, callback_data=f"set_level:{lvl}")
    kb.adjust(4)
    return kb.as_markup()

def kb_next(label=None, data="morning_next"):
    if label is None:
        label = f"{ARROW} –ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"
    kb = InlineKeyboardBuilder()
    kb.button(text=label, callback_data=data)
    return kb.as_markup()

def kb_believe():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{CHECK} –í–µ—Ä—é", callback_data="believe:True")
    kb.button(text=f"{CROSS} –ù–µ –≤–µ—Ä—é", callback_data="believe:False")
    kb.adjust(2)
    return kb.as_markup()

def kb_after_employee():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{GREEN} –¢—ã –ø—Ä–∞–≤ (‚Äì‚Ç¨50)", callback_data="dispute:concede")
    kb.button(text=f"{MAG} –ü—Ä–æ–≤–µ—Ä–∏–º –≤ —Å–ª–æ–≤–∞—Ä–µ", callback_data="dispute:check")
    kb.adjust(1)
    return kb.as_markup()

def collect_examples_for_word(word: str) -> List[tuple]:
    pairs: List[tuple] = []
    if word in STAGE1_EXAMPLES:
        e = STAGE1_EXAMPLES[word]
        pairs.append((e.text, e.text_ru))
    for alt in ALT_OK.get(word, []):
        pairs.append((alt.text, alt.text_ru))
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
    seen, uniq = set(), []
    for t, r in pairs:
        key = (t.strip(), r.strip())
        if key not in seen:
            seen.add(key); uniq.append(key)
    return uniq

def _preserve_case(src: str, repl: str) -> str:
    if src.isupper():
        return repl.upper()
    if src and src[0].isupper():
        return repl.capitalize()
    return repl

def swap_word_everywhere(text: str, target: str, replacement: str) -> str:
    pattern = re.compile(rf"\b{re.escape(target)}\b", re.IGNORECASE)
    def _f(m: re.Match) -> str:
        return _preserve_case(m.group(0), replacement)
    return pattern.sub(_f, text)

def make_wrong_swapped_from_bank(base_word: str, deck_words: List[str], study_bank: Dict[str, List[tuple]]) -> Optional[Example]:
    pairs = study_bank.get(base_word) or []
    if not pairs:
        return None
    base_text, base_ru = random.choice(pairs)
    candidates = [w for w in deck_words if w.lower() != base_word.lower()]
    if not candidates:
        return None
    replacement = random.choice(candidates)
    swapped = swap_word_everywhere(base_text, base_word, replacement)
    if swapped == base_text:
        return None
    return Example(
        text=swapped,
        text_ru=base_ru,         # –ø–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
        uses=[base_word],
        is_correct=False,
        employee_proposal=base_text,
        employee_proposal_ru=base_ru,
        error_type='semantic',
        error_highlight=[replacement],
        explanation="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–¥–º–µ–Ω–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–∑—É—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ."
    )

async def build_evening_queue(deck: List[WordCard], study_bank: Dict[str, List[tuple]], word2id: Dict[str, int]) -> List[EveningItem]:
     deck_words = [c.word for c in deck]
     queue: List[EveningItem] = []
     for card in deck:
         ok_pool, bad_pool = await db_pick_evening_pools(word2id[card.word])
         base_ok = random.choice(ok_pool) if ok_pool else Example(f"This is {card.word}.", f"–≠—Ç–æ {card.word}.", [card.word], True)
         bad_ex = random.choice(bad_pool) if bad_pool else make_wrong_swapped_from_bank(card.word, deck_words, study_bank)
         candidates = [base_ok] + ([bad_ex] if bad_ex else [])
         ex = random.choice(candidates)
         
         queue.append(EveningItem(example=ex, employee_card=True))
     random.shuffle(queue)
     return queue


# --- DB helpers for content (NEW) ---

async def db_pick_deck(level: str, pos: str, k: int = 5):
    """–í—ã–±—Ä–∞—Ç—å k —Å–ª–æ–≤ –¥–ª—è –∫–æ–ª–æ–¥—ã –ø–æ level+pos."""
    pool = await get_pool()
    rows = await pool.fetch(
        """
        select id, word, translation
        from words
        where level = $1 and pos = $2
        order by random()
        limit $3
        """,
        level, pos, k
    )
    # –í–µ—Ä–Ω—ë–º WordCard[] –∏ map word->id
    deck = [WordCard(r["word"], r["translation"]) for r in rows]
    word2id = {r["word"]: r["id"] for r in rows}
    return deck, word2id

async def db_pick_morning_example(word_id: int):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —ç—Ç–∞–ø–∞."""
    pool = await get_pool()
    row = await pool.fetchrow(
        """
        select en, ru
        from examples
        where word_id = $1 and kind in ('ok','alt_ok')
        order by (case when kind='ok' then 0 else 1 end), random()
        limit 1
        """,
        word_id
    )
    return (row["en"], row["ru"]) if row else None

async def db_pick_evening_pools(word_id: int):
    """
    –í–µ—Ä–Ω—ë–º:
      ok_pool: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö Example,
      bad_pool: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ—á–Ω—ã—Ö Example
    –ï—Å–ª–∏ bad_pool –ø—É—Å—Ç ‚Äî –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ—é –ø–æ–¥–º–µ–Ω—É (swap_word_everywhere).
    """
    pool = await get_pool()
    ok_rows = await pool.fetch(
        """select en, ru from examples
           where word_id=$1 and kind in ('ok','alt_ok')""",
        word_id
    )
    bad_rows = await pool.fetch(
        """select en, ru from examples
           where word_id=$1 and kind='bad'""",
        word_id
    )
    ok_pool = [Example(r["en"], r["ru"], uses=[], is_correct=True) for r in ok_rows]
    bad_pool = [Example(r["en"], r["ru"], uses=[], is_correct=False) for r in bad_rows]
    return ok_pool, bad_pool

# ---------- BOT ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def on_start(m: Message):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
    try:
        uid = await ensure_user(m.from_user.id)
        suffix = f"\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω (id={uid})." if uid else ""
    except Exception:
        suffix = ""
    USERS[m.from_user.id] = UserState()
    intro = (
        "üëî Welcome to *Trust or Bust: English Game*!\n\n"
        "–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–ª–µ–Ω—å–∫–æ–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–π —Ñ–∏—Ä–º—ã. –ö–æ–º–ø–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫ –∏ –≤—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ "
        "—Ä–µ—à–∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É—á–∏—Ç—å –ø–æ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤. –ò –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ –Ω–∞—á–∏–Ω–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π :)\n\n"
        "–ù–∞–∂–º–∏ ¬´–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å?¬ª.")
    await m.answer(intro + suffix, parse_mode="Markdown", reply_markup=kb_intro())

@dp.callback_query(F.data == "show_process")
async def show_process(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.stage = "process"
    process_text = (
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –æ —Å–ª–æ–≤–∞—Ö, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n"
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ—à–∏—Ç—å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "–í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ ¬´–í–µ—Ä—é/–ù–µ –≤–µ—Ä—é¬ª. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É. "
        "–ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ ‚Äî –æ—Ç–ª–∏—á–Ω–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ ¬´–ü—Ä–∏–∑–Ω–∞—Ç—å¬ª (‚Äì‚Ç¨50) –∏–ª–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ¬ª "
        "(–µ—Å–ª–∏ –≤—ã –ø—Ä–∞–≤—ã +‚Ç¨50, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì‚Ç¨100).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∞ –ø–æ—Ç–æ–º –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É."
    )
    await cb.message.answer(process_text, reply_markup=kb_process_only_choose_level())
    await cb.answer()

@dp.callback_query(F.data == "choose_level")
async def choose_level(cb: CallbackQuery):
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å: A1 / A2 / B1 / B2", reply_markup=kb_levels())
    await cb.answer()

@dp.callback_query(F.data.startswith("set_level:"))
async def set_level(cb: CallbackQuery):
    level = cb.data.split(":",1)[1]
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.level = level
    await cb.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{level}*\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ:",
        parse_mode="Markdown",
        reply_markup=kb_main_menu()
    )
    await cb.answer()

async def send_next_morning(msg: Message, s: UserState):
    if s.morning_idx >= len(s.deck):
        s.stage = "evening"
        s.evening_idx = 0
        s.evening_queue = await build_evening_queue(s.deck, s.study_bank, s.word2id)
        await msg.answer("üîé –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        await send_next_evening(msg, s)
        return

    n = s.morning_idx + 1
    N = len(s.deck)
    card = s.deck[s.morning_idx]

    pair = await db_pick_morning_example(s.word2id[card.word])
    if pair:
        sample_ok = Example(pair[0], pair[1], [card.word], True)
    else:
        sample_ok = STAGE1_EXAMPLES.get(card.word)
    if not sample_ok:
        alt = ALT_OK.get(card.word, [])
        sample_ok = alt[0] if alt else Example(
            f"This is {card.word}.", f"–≠—Ç–æ {card.translation}.", [card.word], True
        )

    text = (
        f"–°–ª–æ–≤–æ {n} –∏–∑ {N}\n\n"
        f"**{card.word}** ‚Äî {card.translation}\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n‚Äú{sample_ok.text}‚Äù\n_{sample_ok.text_ru}_"
    )
    label = "‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ" if n == N else None
    await msg.answer(text, parse_mode="Markdown", reply_markup=kb_next(label=label, data="morning_next"))

def collect_study_bank(deck: List[WordCard]) -> Dict[str, List[tuple]]:
    bank: Dict[str, List[tuple]] = {}
    for c in deck:
        pairs = []
        if c.word in STAGE1_EXAMPLES:
            e = STAGE1_EXAMPLES[c.word]
            pairs.append((e.text, e.text_ru))
        for alt in ALT_OK.get(c.word, []):
            pairs.append((alt.text, alt.text_ru))
        # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
        seen, uniq = set(), []
        for t, r in pairs:
            key = (t.strip(), r.strip())
            if key not in seen:
                seen.add(key); uniq.append(key)
        bank[c.word] = uniq
    return bank

@dp.callback_query(F.data == "start_day")
async def start_day(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.stage = "morning"
    s.balance = 0
    s.results.clear()
    s.morning_idx = 0
    s.evening_idx = 0
    # bank = WORD_BANK.get(s.level) or B1_ADJ
    # k = min(5, len(bank)) or 1
    # s.deck = random.sample(bank, k=k)
    s.deck, s.word2id = await db_pick_deck(s.level, s.pos, k=5)
    s.study_bank = collect_study_bank(s.deck)
    # —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ –ë–î
    try:
        uid = await ensure_user(cb.from_user.id)
        s.session_id = await start_session(uid, s.level)
    except Exception as e:
        # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ –≤ —á–∞—Ç –∏ –≤ stdout
        print("start_day DB ERROR:", repr(e))
        await cb.message.answer(f"‚ö†Ô∏è start_day DB ERROR: {e!r}")
        s.session_id = 0  # –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º

    await cb.message.answer("üìò –≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å–æ —Å–ª–æ–≤–∞–º–∏")
    await send_next_morning(cb.message, s)
    await cb.answer()

@dp.callback_query(F.data == "morning_next")
async def on_morning_next(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "morning":
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ —ç—Ç–∞–ø —Å–ª–æ–≤.", show_alert=True); return
    s.morning_idx += 1
    await send_next_morning(cb.message, s)
    await cb.answer()

async def send_next_evening(msg: Message, s: UserState):
    if s.evening_idx >= len(s.evening_queue):
        s.stage = "done"
        correct = sum(1 for r in s.results if r["result"] == "match")
        disputes = sum(1 for r in s.results if str(r["result"]).startswith("dispute"))
        summary = f"""\n{FLAG} –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω.
–°–æ–≤–ø–∞–ª–æ: {correct}
–°–ø–æ—Ä–æ–≤: {disputes}
–ë–∞–ª–∞–Ω—Å: ‚Ç¨{s.balance}"""
        try:
            if s.session_id:
                await finish_session(s.session_id, s.balance)
        except Exception:
            pass
        await msg.answer(summary, reply_markup=kb_main_menu())
        return

    item = s.evening_queue[s.evening_idx]
    ex = item.example
    body = f"""–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {s.evening_idx+1}/{len(s.evening_queue)}:

‚Äú{ex.text}‚Äù
_{ex.text_ru}_

–í–µ—Ä–∏—à—å, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?"""
    await msg.answer(body, parse_mode="Markdown", reply_markup=kb_believe())

@dp.callback_query(F.data.startswith("believe:"))
async def on_believe(cb: CallbackQuery):
    user_choice = cb.data.split(":")[1] == "True"
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "evening":
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∞.", show_alert=True); return

    item = s.evening_queue[s.evening_idx]
    ex = item.example
    truth = ex.is_correct

    # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—à–∏–±—Å—è ‚Üí —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω—É (–≤—Å–µ–≥–¥–∞)
    # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–∞–≤ ‚Üí —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—à–∏–±–∏—Ç—å—Å—è (30%)
    if user_choice != truth:
        employee_card = truth
    else:
        employee_card = truth if random.random() < 0.7 else (not truth)

    await cb.message.answer(
        f"{EMP} –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: " + (f"{CHECK} –í–µ—Ä–Ω–æ" if employee_card else f"{CROSS} –ù–µ –≤–µ—Ä–Ω–æ")
    )

    # —Å–æ–≤–ø–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–∞–ª–µ–µ
    if user_choice == employee_card:
        s.results.append({
            "text": ex.text,
            "truth": truth,
            "your_choice": user_choice,
            "employee_card": employee_card,
            "result": "match",
            "delta": 0
        })
        # –ª–æ–≥ –≤ –ë–î
        try:
            if s.session_id:
                # –±–∞–ª–∞–Ω—Å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                await append_result(
                    s.session_id,
                    s.evening_idx,      # —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
                    ex.text, ex.text_ru,
                    truth,
                    user_choice,
                    employee_card,
                    "match",
                    0,
                    s.balance
                )
        except Exception as e:
            print("append_result ERROR:", repr(e))
            await cb.message.answer(f"‚ö†Ô∏è append_result ERROR: {e!r}")
        await cb.message.answer("üëç –°–æ–≤–ø–∞–ª–æ. –ò–¥—ë–º –¥–∞–ª—å—à–µ.")
        s.evening_idx += 1
        await send_next_evening(cb.message, s)
        await cb.answer(); return

    # —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ
    proposal = ex.employee_proposal
    proposal_ru = ex.employee_proposal_ru

    if not employee_card:
        # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–∞–∑–∞–ª ‚ùå
        if truth is True:
            # –∏–≥—Ä–æ–∫ –ø—Ä–∞–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—à–∏–±–∞–µ—Ç—Å—è ‚Üí –æ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç ¬´–ø–æ–ø—Ä–∞–≤–∫—É¬ª, –∫–æ—Ç–æ—Ä–∞—è –æ—à–∏–±–æ—á–Ω–∞:
            # —Å–¥–µ–ª–∞–µ–º –µ—ë –∫–∞–∫ ¬´—Å–ª–æ–≤–æ-–ø–æ–¥–º–µ–Ω–∞¬ª
            deck_words = [c.word for c in s.deck]
            wrong_pair = None
            # —Å–æ–±–µ—Ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Example, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–π
            src_ok = Example(text=ex.text, text_ru=ex.text_ru, uses=ex.uses, is_correct=True)
            # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞–º–µ–Ω—ã:
            # NOTE: –∑–¥–µ—Å—å –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if src_ok.uses:
                base_word = src_ok.uses[0]
                candidates = [w for w in deck_words if w.lower() != base_word.lower()]
                if candidates:
                    repl = random.choice(candidates)
                    wrong_text = swap_word_everywhere(src_ok.text, base_word, repl)
                    if wrong_text != src_ok.text:
                        proposal, proposal_ru = wrong_text, src_ok.text_ru
        else:
            # –∏—Å—Ç–∏–Ω–∞ = –æ—à–∏–±–∫–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∞–≤ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            if not proposal and ex.uses:
                base = STAGE1_EXAMPLES.get(ex.uses[0])
                if base:
                    proposal, proposal_ru = base.text, base.text_ru
    else:
        proposal = None
        proposal_ru = None

    if proposal:
        await cb.message.answer(f"""{NOTE} –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç:
‚Äú{proposal}‚Äù
_{proposal_ru or ''}_""", parse_mode="Markdown")
    else:
        await cb.message.answer(f"{EMP} –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–µ.")

    s.results.append({
        "text": ex.text,
        "truth": truth,
        "your_choice": user_choice,
        "employee_card": employee_card,
        "result": "dispute_wait",
        "delta": None
    })

    await cb.message.answer("–¢–≤–æ–π —Ö–æ–¥:", reply_markup=kb_after_employee())
    await cb.answer()

def format_with_highlights(text: str, highlights: List[str]) -> str:
    out = text
    for frag in sorted(highlights, key=len, reverse=True):
        out = out.replace(frag, f"**_{frag}_**")
    return out

@dp.callback_query(F.data.startswith("dispute:"))
async def on_dispute(cb: CallbackQuery):
    action = cb.data.split(":",1)[1]
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "evening":
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ —Å–ø–æ—Ä.", show_alert=True); return

    idx = next((i for i in range(len(s.results)-1, -1, -1)
                if s.results[i]["result"] == "dispute_wait" and s.results[i]["delta"] is None), None)
    if idx is None:
        await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–æ—Ä.", show_alert=True); return

    item = s.evening_queue[s.evening_idx]
    ex = item.example
    truth = ex.is_correct
    your_choice = s.results[idx]["your_choice"]

    if truth:
        note = ex.correct_note or "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        highlighted = ex.text
    else:
        note = ex.explanation or "–í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞."
        highlighted = format_with_highlights(ex.text, ex.error_highlight)

    if action == "concede":
        s.balance -= 50
        try:
            if s.session_id:
                await append_result(
                    s.session_id, s.evening_idx,
                    ex.text, ex.text_ru, truth,
                    your_choice, s.results[idx]["employee_card"],
                    "dispute_concede",
                    -50, s.balance
                )
        except Exception as e:
            print("append_result ERROR:", repr(e))
            await cb.message.answer(f"‚ö†Ô∏è append_result ERROR: {e!r}")
        s.results[idx]["result"] = "dispute_concede"
        s.results[idx]["delta"] = -50
        await cb.message.answer(f"{GREEN} ¬´–¢—ã –ø—Ä–∞–≤¬ª. –í—ã –ø–ª–∞—Ç–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ‚Ç¨50.")
    elif action == "check":
        if your_choice == truth:
            s.balance += 50
            try:
                if s.session_id:
                    await append_result(
                        s.session_id, s.evening_idx,
                        ex.text, ex.text_ru, truth,
                        your_choice, s.results[idx]["employee_card"],
                        "dispute_check_win",
                        +50, s.balance
                        )
            except Exception as e:
                print("append_result ERROR:", repr(e))
                await cb.message.answer(f"‚ö†Ô∏è append_result ERROR: {e!r}")
            s.results[idx]["result"] = "dispute_check_win"
            s.results[idx]["delta"] = +50
            await cb.message.answer(f"""{CHECK} –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–∞–≤—ã. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏—Å—Ç—ã–∂–µ–Ω.
{note}

‚Äú{highlighted}‚Äù""", parse_mode="Markdown")
        else:
            s.balance -= 100
            try:
                if s.session_id:
                    await append_result(
                        s.session_id, s.evening_idx,
                        ex.text, ex.text_ru, truth,
                        your_choice, s.results[idx]["employee_card"],
                        "dispute_check_lose",
                        -100, s.balance
                    )
            except Exception as e:
                print("append_result ERROR:", repr(e))
                await cb.message.answer(f"‚ö†Ô∏è append_result ERROR: {e!r}")
            s.results[idx]["result"] = "dispute_check_lose"
            s.results[idx]["delta"] = -100
            await cb.message.answer(f"""{CROSS} –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–ø—Ä–∞–≤—ã. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∏–∫—É–µ—Ç.
{note}

‚Äú{highlighted}‚Äù""", parse_mode="Markdown")
    else:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True); return

    s.evening_idx += 1
    await send_next_evening(cb.message, s)
    await cb.answer()

@dp.callback_query(F.data == "export_csv")
async def export_csv(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        uid = await ensure_user(cb.from_user.id)
        pool = await get_pool()
        rows = await pool.fetch(
            """
            select
              r.id, s.user_id, s.level, r.item_index,
              r.sentence_en, r.sentence_ru,
              r.truth, r.user_choice, r.employee_card, r.outcome,
              r.delta, r.balance_after, r.created_at
            from results r
            join sessions s on s.id = r.session_id
            where s.user_id = $1
            order by r.created_at
            """,
            uid
        )
        header = ["id","user_id","level","item_index","sentence_en","sentence_ru",
                  "truth","user_choice","employee_card","outcome","delta","balance_after","created_at"]
        sio = StringIO(); w = csv.writer(sio); w.writerow(header)
        for r in rows:
            w.writerow([r[h] for h in header])
        data = sio.getvalue().encode("utf-8")
        buf = BufferedInputFile(data, filename=f"results_{cb.from_user.id}.csv")
        await cb.message.answer_document(buf, caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î –≥–æ—Ç–æ–≤.")
        await cb.answer()
        return
    except Exception as e:
        print("export DB ERROR:", repr(e))

        # 2) Fallback ‚Äî —Ç–≤–æ—è —Ç–µ–∫—É—â–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        filename = f"results_{cb.from_user.id}.csv"
        with open(filename, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["sentence","truth","your_choice","employee_card","result","delta","balance_after_row"])
            bal = 0
            for r in s.results:
                if isinstance(r.get("delta"), int):
                    bal += r["delta"]
                w.writerow([
                    r.get("text",""),
                    r.get("truth",""),
                    r.get("your_choice",""),
                    r.get("employee_card",""),
                    r.get("result",""),
                    r.get("delta",""),
                    bal
                ])
        await cb.message.answer_document(FSInputFile(filename), caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç (–ª–æ–∫–∞–ª—å–Ω–æ) –≥–æ—Ç–æ–≤.")
        await cb.answer()


@dp.message(Command("stats"))
async def on_stats(m: Message):
    s = USERS.get(m.from_user.id, UserState())

    # –ª–æ–∫–∞–ª—å–Ω—ã–π fallback (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ñ–ª–∞–π–Ω–∞ –ë–î)
    local_total = sum(1 for r in s.results if r.get("result") in ("match","dispute_concede","dispute_check_win","dispute_check_lose"))
    local_correct = sum(1 for r in s.results if r.get("result") in ("match","dispute_concede","dispute_check_win","dispute_check_lose") and r.get("truth")==r.get("your_choice"))
    local_acc = round((local_correct/local_total)*100,1) if local_total else 0.0

    try:
        uid = await ensure_user(m.from_user.id)
        pool = await get_pool()
        row = await pool.fetchrow(
            """
            select
              count(*) as total,
              count(*) filter (where r.truth = r.user_choice) as correct,
              coalesce(sum(coalesce(r.delta,0)),0) as sum_delta
            from results r
            join sessions s on s.id = r.session_id
            where s.user_id = $1
            """,
            uid
        )
        total = row["total"] or 0
        correct = row["correct"] or 0
        acc = round((correct/total)*100,1) if total else 0.0
        await m.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ –ë–î)\n"
            f"–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {acc}%\n"
            f"–°—É–º–º–∞—Ä–Ω–∞—è –¥–µ–ª—å—Ç–∞: ‚Ç¨{row['sum_delta']}\n"
        )
    except Exception as e:
        print("stats DB ERROR:", repr(e))
        await m.answer(
            "üìä –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é)\n"
            f"–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {local_total}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {local_acc}%\n"
            f"–ë–∞–ª–∞–Ω—Å (–ª–æ–∫–∞–ª—å–Ω–æ): ‚Ç¨{s.balance}\n"
        )

# –û—Ç–ª–∞–¥–∫–∞

@dp.message(Command("dbping"))
async def dbping(m: Message):
    try:
        pool = await get_pool()
        row = await pool.fetchval("select 1")
        await m.answer(f"DB ping: {row}")
    except Exception as e:
        await m.answer(f"DB ping ERROR: {e!r}")

@dp.message(Command("dbschema"))
async def dbschema(m: Message):
    try:
        pool = await get_pool()
        q = """
        select table_name, column_name, data_type
        from information_schema.columns
        where table_schema='public' and table_name in ('users','sessions','results','examples','words')
        order by table_name, ordinal_position;
        """
        rows = await pool.fetch(q)
        if not rows:
            await m.answer("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º users/sessions/results/examples/words")
            return

        out = {}
        for r in rows:
            out.setdefault(r["table_name"], []).append(f"{r['column_name']}: {r['data_type']}")

        # –±–µ–∑ Markdown/HTML, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        text = "\n\n".join([f"{t}\n- " + "\n- ".join(cols) for t, cols in out.items()])

        # —Ç–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —à–ª—ë–º —á–∞–Ω–∫–∞–º–∏
        limit = 3500
        for i in range(0, len(text), limit):
            await m.answer(text[i:i+limit])

    except Exception as e:
        await m.answer(f"DB schema ERROR: {e!r}")

@dp.message(Command("dbwho"))
async def dbwho(m: Message):
    # –∫—Ç–æ –º—ã —Ç–∞–∫–∏–µ –¥–ª—è Postgres (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏/—Ö–æ—Å—Ç–∞)
    try:
        pool = await get_pool()
        row = await pool.fetchrow("select current_user as u, inet_server_addr()::text as host, inet_server_port() as port")
        await m.answer(f"user={row['u']}, host={row['host']}:{row['port']}")
    except Exception as e:
        await m.answer(f"DB who ERROR: {e!r}")

@dp.message(Command("dbcount"))
async def dbcount(m: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏ '–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–∞–±–ª–∏—Ü–∞–º (–ø–æ–¥ —Ç–≤–æ—é —Å—Ö–µ–º—É)."""
    try:
        pool = await get_pool()
        q = """
        with
        u as (
          select count(*) as cnt, max(created_at) as updated
          from users
        ),
        s as (
          select count(*) as cnt, max(created_at) as updated
          from sessions
        ),
        r as (
          select count(*) as cnt, max(created_at) as updated
          from results
        ),
        w as (
          select
            (select count(*) from words) as cnt,
            case
              when exists (
                select 1 from information_schema.columns
                where table_schema='public' and table_name='words' and column_name='created_at'
              )
              then (select max(created_at) from words)
              else null
            end as updated
        ),
        e as (
          select
            (select count(*) from examples) as cnt,
            case
              when exists (
                select 1 from information_schema.columns
                where table_schema='public' and table_name='examples' and column_name='created_at'
              )
              then (select max(created_at) from examples)
              else null
            end as updated
        )
        select
          (select cnt from u) as users_cnt,
          (select updated from u) as users_updated,
          (select cnt from s) as sessions_cnt,
          (select updated from s) as sessions_updated,
          (select cnt from r) as results_cnt,
          (select updated from r) as results_updated,
          (select cnt from w) as words_cnt,
          (select updated from w) as words_updated,
          (select cnt from e) as examples_cnt,
          (select updated from e) as examples_updated
        """
        row = await pool.fetchrow(q)

        def fmt(ts):
            return ts.strftime("%Y-%m-%d %H:%M:%S") if ts else "‚Äî"

        txt = (
            "üìä DB counts & last updates\n"
            f"users:    {row['users_cnt']}   (updated: {fmt(row['users_updated'])})\n"
            f"sessions: {row['sessions_cnt']}   (updated: {fmt(row['sessions_updated'])})\n"
            f"results:  {row['results_cnt']}   (updated: {fmt(row['results_updated'])})\n"
            f"words:    {row['words_cnt']}   (updated: {fmt(row['words_updated'])})\n"
            f"examples: {row['examples_cnt']}   (updated: {fmt(row['examples_updated'])})"
        )
        await m.answer(txt)
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è dbcount ERROR: {e!r}")


# ---------- RUN ----------
async def main():
    print("Bot is running‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
