import os
import io, csv
import random
import re
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import (
    ensure_user, upsert_session, set_session_status,
    pick_words_for_level, save_deck, load_deck,
    fetch_ok_example, record_attempt, add_balance, fetch_export
)

# ---------- CONFIG ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is not set")

# ---------- ASCII-SAFE ICONS ----------
CHECK = "‚úÖ"
CROSS = "‚ùå"
EMP   = "üßë‚Äçüíº"
NOTE  = "üìù"
START_EMOJI  = "üöÄ"
EXPORT_EMOJI = "üì§"
MAG   = "üîé"
GREEN = "üü¢"
ARROW = "‚û°Ô∏è"
DOC   = "üìÑ"
FLAG  = "üèÅ"

# ---------- RUNTIME STATE (–º–∏–Ω–∏–º—É–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è UX) ----------
class UserState:
    def __init__(self):
        self.stage: str = "idle"          # idle | process | morning | evening | done
        self.level: str = "A2"
        self.session_id: Optional[int] = None
        self.deck: List[Dict] = []         # [{position, word_id, word, translation}]
        self.morning_idx: int = 0
        self.evening_idx: int = 0
        self.morning_shown: Dict[int, str] = {}  # word_id -> en (—á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ —É—Ç—Ä–æ–º)
        self.pending: Dict = {}            # –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞

USERS: Dict[int, UserState] = {}

# ---------- KEYBOARDS ----------
def kb_intro():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å?", callback_data="show_process")
    kb.adjust(1)
    return kb.as_markup()

def kb_process_menu():
    # –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –¥–∞—ë–º —Ç–æ–ª—å–∫–æ "–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å"
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{MAG} –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="choose_level")
    kb.adjust(1)
    return kb.as_markup()

def kb_levels():
    kb = InlineKeyboardBuilder()
    for lvl in ["A1", "A2", "B1", "B2"]:
        kb.button(text=lvl, callback_data=f"set_level:{lvl}")
    kb.adjust(4)
    return kb.as_markup()

def kb_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{START_EMOJI} –ö –∏–≥—Ä–µ", callback_data="start_day")
    kb.button(text=f"{MAG} –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="choose_level")
    kb.button(text=f"{EXPORT_EMOJI} –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")
    kb.adjust(1)
    return kb.as_markup()

def kb_next(label: Optional[str] = None, data: str = "morning_next"):
    if label is None:
        label = f"{ARROW} –ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"
    kb = InlineKeyboardBuilder()
    kb.button(text=label, callback_data=data)
    kb.adjust(1)
    return kb.as_markup()

def kb_believe():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{CHECK} –í–µ—Ä—é", callback_data="believe:True")
    kb.button(text=f"{CROSS} –ù–µ –≤–µ—Ä—é", callback_data="believe:False")
    kb.adjust(2)
    return kb.as_markup()

def kb_after_employee():
    kb = InlineKeyboardBuilder()
    kb.button(text=f"{GREEN} –¢—ã –ø—Ä–∞–≤ (‚Äì‚Ç¨50)", callback_data="dispute:concede")
    kb.button(text=f"{MAG} –ü—Ä–æ–≤–µ—Ä–∏–º –≤ —Å–ª–æ–≤–∞—Ä–µ", callback_data="dispute:check")
    kb.adjust(1)
    return kb.as_markup()

# ---------- HELPERS ----------
def format_with_highlights(text: str, highlights: List[str]) -> str:
    out = text
    # –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–¥–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–º–∏
    for frag in sorted(highlights, key=len, reverse=True):
        out = out.replace(frag, f"**_{frag}_**")
    return out

def _preserve_case(src: str, repl: str) -> str:
    if src.isupper():
        return repl.upper()
    if src[:1].isupper():
        return repl.capitalize()
    return repl

def swap_studied(text: str, target: str, pool_words: List[str]) -> (str, Optional[str]):
    """
    –ü–æ–¥–º–µ–Ω–∞ 'target' –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –¥—Ä—É–≥–æ–µ –∏–∑ pool_words (1 —Ä–∞–∑, —Ü–µ–ª—ã–º —Å–ª–æ–≤–æ–º).
    """
    candidates = [w for w in pool_words if w.lower() != target.lower()]
    if not candidates:
        return text, None
    replacement = random.choice(candidates)

    pattern = re.compile(rf"\b{re.escape(target)}\b", flags=re.IGNORECASE)

    def repl(m: re.Match) -> str:
        return _preserve_case(m.group(0), replacement)

    swapped = pattern.sub(repl, text, count=1)
    if swapped == text:
        return text, None
    return swapped, replacement

# ---------- BOT ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def on_start(m: Message):
    USERS[m.from_user.id] = UserState()
    # —Å–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å—Ä–∞–∑—É
    uid = await ensure_user(m.from_user.id)

    intro_text = (
        "üëî Welcome to *Trust or Bust: English Game*!\n\n"
        "–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–ª–µ–Ω—å–∫–æ–π –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–π —Ñ–∏—Ä–º—ã. –ö–æ–º–ø–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫ –∏ –≤—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ "
        "—Ä–µ—à–∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É—á–∏—Ç—å –ø–æ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤. –ò –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ –Ω–∞—á–∏–Ω–∞–Ω–∏–µ "
        "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π :)\n\n"
        "–ù–∞–∂–º–∏ ¬´–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å?¬ª.")
    await m.answer(intro_text, parse_mode="Markdown", reply_markup=kb_intro())

@dp.callback_query(F.data == "show_process")
async def show_process(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.stage = "process"
    process_text = (
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –æ —Å–ª–æ–≤–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ —É—á–∏—Ç–µ, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n"
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–Ω–µ—Å—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –í—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ò–Ω–æ–≥–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–ª–æ–≤–∏—Ç—å –≤–∞—Å.\n\n"
        "–í—ã –≥–æ–ª–æ—Å—É–µ—Ç–µ ¬´–í–µ—Ä–Ω–æ/–ù–µ –≤–µ—Ä–Ω–æ¬ª. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É (–∫–∞–∫ –æ–Ω –∑–∞–¥—É–º—ã–≤–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).\n"
        "–ï—Å–ª–∏ –º–Ω–µ–Ω–∏—è —Å–æ–≤–ø–∞–ª–∏ ‚Äî –æ–∫. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ ¬´–ü—Ä–∏–∑–Ω–∞—Ç—å¬ª (‚Äì‚Ç¨50) –∏–ª–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ¬ª (+‚Ç¨50/-‚Ç¨100).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É."
    )
    await cb.message.answer(process_text, reply_markup=kb_process_menu())
    await cb.answer()

@dp.callback_query(F.data == "choose_level")
async def choose_level(cb: CallbackQuery):
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å: A1 / A2 / B1 / B2", reply_markup=kb_levels())
    await cb.answer()

@dp.callback_query(F.data.startswith("set_level:"))
async def set_level(cb: CallbackQuery):
    lvl = cb.data.split(":", 1)[1]
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.level = lvl
    await cb.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{lvl}*\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ:",
        parse_mode="Markdown",
        reply_markup=kb_main_menu()
    )
    await cb.answer()

@dp.callback_query(F.data == "start_day")
async def start_day(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    s.stage = "morning"
    s.morning_idx = 0
    s.evening_idx = 0
    s.morning_shown.clear()
    s.pending.clear()

    user_id = await ensure_user(cb.from_user.id)
    # —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    s.session_id = await upsert_session(user_id, s.level)
    # –Ω–∞–±–∏—Ä–∞–µ–º 5 —Å–ª–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ deck
    words = await pick_words_for_level(s.level, pos="adjectives", n=5)
    await save_deck(s.session_id, [w["id"] for w in words])
    s.deck = await load_deck(s.session_id)

    await cb.message.answer("üìò –≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å–æ —Å–ª–æ–≤–∞–º–∏")
    await send_next_morning(cb.message, s)
    await cb.answer()

async def send_next_morning(msg: Message, s: UserState):
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–µ—á–µ—Ä—É
    if s.morning_idx >= len(s.deck):
        await set_session_status(s.session_id, "evening")
        s.stage = "evening"
        s.evening_idx = 0
        await msg.answer("üìó –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        await send_next_evening(msg, s)
        return

    item = s.deck[s.morning_idx]
    ok = await fetch_ok_example(item["word_id"])
    # –∑–∞–ø–æ–º–Ω–∏–º –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ç—Ä–æ–º EN, —á—Ç–æ–± –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∞ –≤–µ—á–µ—Ä–æ–º
    if ok:
        s.morning_shown[item["word_id"]] = ok["en"]
        text = (
            f"–°–ª–æ–≤–æ {s.morning_idx+1}/5\n\n"
            f"*{item['word']}* ‚Äî {item['translation']}\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n‚Äú{ok['en']}‚Äù\n_{ok['ru']}_"
        )
    else:
        text = (
            f"–°–ª–æ–≤–æ {s.morning_idx+1}/5\n\n"
            f"*{item['word']}* ‚Äî {item['translation']}\n\n"
            f"_–ü—Ä–∏–º–µ—Ä –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω._"
        )
    # –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ –º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å
    last = (s.morning_idx + 1 == len(s.deck))
    await msg.answer(text, parse_mode="Markdown",
                     reply_markup=kb_next("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ" if last else None, "morning_next"))

@dp.callback_query(F.data == "morning_next")
async def on_morning_next(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "morning":
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ —ç—Ç–∞–ø —Å–ª–æ–≤.", show_alert=True); return
    s.morning_idx += 1
    await send_next_morning(cb.message, s)
    await cb.answer()

async def send_next_evening(msg: Message, s: UserState):
    if s.evening_idx >= len(s.deck):
        await set_session_status(s.session_id, "done")
        s.stage = "done"
        await msg.answer("üèÅ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", reply_markup=kb_main_menu())
        return

    deck_words = [d["word"] for d in s.deck]
    item = s.deck[s.evening_idx]

    # –≤–∑—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ù–ï —Ä–∞–≤–Ω—ã–π —É—Ç—Ä–µ–Ω–Ω–µ–º—É
    exclude = [s.morning_shown.get(item["word_id"])] if s.morning_shown.get(item["word_id"]) else []
    ok = await fetch_ok_example(item["word_id"], exclude_en=exclude)
    if ok:
        base_en, base_ru, base_id = ok["en"], ok["ru"], ok["id"]
    else:
        base_en, base_ru, base_id = f"This is {item['word']}.", f"–≠—Ç–æ {item['translation']}.", None

    # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ–¥–º–µ–Ω–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–∑ –ø—è—Ç—ë—Ä–∫–∏
    swapped_en, replaced = swap_studied(base_en, item["word"], deck_words)
    bad_available = (replaced is not None and swapped_en != base_en)

    # –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫—É
    if bad_available and random.random() < 0.5:
        shown_en, shown_ru, truth, example_id = swapped_en, base_ru, False, base_id
    else:
        shown_en, shown_ru, truth, example_id = base_en, base_ru, True, base_id

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ —Å–ø–æ—Ä–∞
    s.pending = {
        "session_id": s.session_id,
        "word_id": item["word_id"],
        "shown_en": shown_en,
        "shown_ru": shown_ru,
        "truth": truth,
        "example_id": example_id,
        "correct_en": base_en,
        "correct_ru": base_ru,
    }

    body = (
        f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {s.evening_idx+1}/5:\n\n"
        f"‚Äú{shown_en}‚Äù\n_{shown_ru}_\n\n"
        f"–í–µ—Ä–∏—à—å, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?"
    )
    await msg.answer(body, parse_mode="Markdown", reply_markup=kb_believe())

@dp.callback_query(F.data.startswith("believe:"))
async def on_believe(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "evening" or not s.pending:
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∞.", show_alert=True); return

    user_choice = (cb.data.split(":")[1] == "True")
    p = s.pending
    truth = p["truth"]

    # –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—à–∏–±—Å—è ‚Üí —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω—É; –µ—Å–ª–∏ –ø—Ä–∞–≤ ‚Üí 30% –æ—à–∏–±–∞–µ—Ç—Å—è
    if user_choice != truth:
        employee_card = truth
    else:
        employee_card = truth if random.random() < 0.7 else (not truth)

    await cb.message.answer("üßë‚Äçüíº –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: " + ("‚úÖ –í–µ—Ä–Ω–æ" if employee_card else "‚ùå –ù–µ –≤–µ—Ä–Ω–æ"))

    if user_choice == employee_card:
        # –º–Ω–µ–Ω–∏—è —Å–æ–≤–ø–∞–ª–∏ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –¥–µ–Ω–µ–≥ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
        await record_attempt(
            s.session_id, p["word_id"], p["example_id"],
            p["shown_en"], p["shown_ru"], truth,
            user_choice, employee_card, 0
        )
        await cb.message.answer("üëç –°–æ–≤–ø–∞–ª–æ. –ò–¥—ë–º –¥–∞–ª—å—à–µ.")
        s.evening_idx += 1
        s.pending = {}
        await send_next_evening(cb.message, s)
        await cb.answer(); return

    # —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ: –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–∞–∑–∞–ª ¬´‚ùå¬ª, –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    if not employee_card:
        await cb.message.answer(
            "üìù –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç:\n"
            f"‚Äú{p['correct_en']}‚Äù\n_{p['correct_ru']}_",
            parse_mode="Markdown"
        )
    else:
        await cb.message.answer("üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë–º –≤–∞—Ä–∏–∞–Ω—Ç–µ.")

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–æ—Ä–∞
    p["user_choice"] = user_choice
    p["employee_card"] = employee_card
    s.pending = p

    await cb.message.answer("–¢–≤–æ–π —Ö–æ–¥:", reply_markup=kb_after_employee())
    await cb.answer()

@dp.callback_query(F.data.startswith("dispute:"))
async def on_dispute(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())
    if s.stage != "evening" or not s.pending:
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.", show_alert=True); return

    action = cb.data.split(":")[1]  # concede | check
    p = s.pending
    truth = p["truth"]
    user_choice = p["user_choice"]
    employee_card = p["employee_card"]

    # –ø–æ–¥—Å—á—ë—Ç –¥–µ–ª—å—Ç—ã
    if action == "concede":
        delta = -50
        note  = "–ü—Ä–∏–∑–Ω–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ‚àí‚Ç¨50."
    else:
        if user_choice == truth:
            delta = +50
            note  = "–ü—Ä–æ–≤–µ—Ä–∏–ª–∏: –≤—ã –±—ã–ª–∏ –ø—Ä–∞–≤—ã. +‚Ç¨50."
        else:
            delta = -100
            note  = "–ü—Ä–æ–≤–µ—Ä–∏–ª–∏: –≤—ã –±—ã–ª–∏ –Ω–µ–ø—Ä–∞–≤—ã. ‚àí‚Ç¨100."

    # –∑–∞–ø–∏—Å—å –≤ –ë–î
    user_id = await ensure_user(cb.from_user.id)
    await add_balance(user_id, delta)
    await record_attempt(
        s.session_id, p["word_id"], p["example_id"],
        p["shown_en"], p["shown_ru"], truth,
        user_choice, employee_card, delta
    )

    await cb.message.answer(note)
    s.pending = {}
    s.evening_idx += 1
    await send_next_evening(cb.message, s)
    await cb.answer()

# @dp.callback_query(F.data == "export_csv")
# async def export_csv(cb: CallbackQuery):
#     s = USERS.setdefault(cb.from_user.id, UserState())
#     if not s.session_id:
#         await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.", show_alert=True); return

#     rows = await fetch_export(s.session_id)
#     if not rows:
#         await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."); return

#     # —Ñ–æ—Ä–º–∏—Ä—É–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
#     from io import BytesIO
#     buf = BytesIO()
#     w = csv.writer(buf)
#     w.writerow(["created_at","word","translation","shown_en","shown_ru","truth","user_choice","employee_card","delta"])
#     for r in rows:
#         w.writerow([
#             r["created_at"], r["word"], r["translation"], r["shown_en"], r["shown_ru"],
#             r["truth"], r["user_choice"], r["employee_card"], r["delta"]
#         ])
#     buf.seek(0)
#     await cb.message.answer_document(document=("results.csv", buf))

@dp.callback_query(F.data == "export_csv")
async def export_csv(cb: CallbackQuery):
    s = USERS.setdefault(cb.from_user.id, UserState())

    # –ü–∏—à–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä (StringIO) ‚Üí –∑–∞—Ç–µ–º –∫–æ–¥–∏—Ä—É–µ–º –≤ bytes
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["created_at","word","translation","shown_en","shown_ru","truth","user_choice","employee_card","delta","balance_after_row"])

    bal = 0
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ
    for r in s.results:
        if isinstance(r.get("delta"), int):
            bal += r["delta"]
        w.writerow([
            r.get("created_at",""),
            r.get("word",""),
            r.get("translation",""),
            r.get("text",""),
            r.get("text_ru",""),
            r.get("truth",""),
            r.get("your_choice",""),
            r.get("employee_card",""),
            r.get("delta",""),
            bal
        ])

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes (–º–æ–∂–Ω–æ —Å BOM, —á—Ç–æ–±—ã Excel –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
    data = buf.getvalue().encode("utf-8-sig")
    buf.close()

    filename = f"results_{cb.from_user.id}.csv"
    file = BufferedInputFile(data=data, filename=filename)

    await cb.message.answer_document(
        document=file,
        caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (CSV)"
    )

async def main():
    print("Bot is running‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
